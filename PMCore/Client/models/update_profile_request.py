# coding: utf-8

"""
    全部  API 文档

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class UpdateProfileRequest(BaseModel):
    """
    UpdateProfileRequest
    """ # noqa: E501
    avatar: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="用户头像的链接或路径")
    data: Optional[StrictStr] = Field(default=None, description="用户的其他数据，可以是序列化后的对象或JSON字符串")
    nick_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="用户的昵称", alias="nickName")
    interest_tags: Optional[StrictStr] = Field(default=None, description="兴趣标签", alias="interestTags")
    biography: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="个人简介")
    gender: Optional[Annotated[str, Field(strict=True, max_length=15)]] = Field(default=None, description="性别")
    birthday: Optional[datetime] = Field(default=None, description="生日")
    occupation: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="职业")
    education: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="学历")
    contact: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="联系方式")
    languages: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="语言")
    social_links: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="社交网络链接", alias="socialLinks")
    relationship_status: Optional[Annotated[str, Field(strict=True, max_length=20)]] = Field(default=None, description="婚姻状态", alias="relationshipStatus")
    company: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="公司")
    industry: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="行业")
    company_position: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="行业职位", alias="companyPosition")
    private_settings: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="私密设置", alias="privateSettings")
    __properties: ClassVar[List[str]] = ["avatar", "data", "nickName", "interestTags", "biography", "gender", "birthday", "occupation", "education", "contact", "languages", "socialLinks", "relationshipStatus", "company", "industry", "companyPosition", "privateSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateProfileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if avatar (nullable) is None
        # and model_fields_set contains the field
        if self.avatar is None and "avatar" in self.model_fields_set:
            _dict['avatar'] = None

        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        # set to None if nick_name (nullable) is None
        # and model_fields_set contains the field
        if self.nick_name is None and "nick_name" in self.model_fields_set:
            _dict['nickName'] = None

        # set to None if interest_tags (nullable) is None
        # and model_fields_set contains the field
        if self.interest_tags is None and "interest_tags" in self.model_fields_set:
            _dict['interestTags'] = None

        # set to None if biography (nullable) is None
        # and model_fields_set contains the field
        if self.biography is None and "biography" in self.model_fields_set:
            _dict['biography'] = None

        # set to None if gender (nullable) is None
        # and model_fields_set contains the field
        if self.gender is None and "gender" in self.model_fields_set:
            _dict['gender'] = None

        # set to None if birthday (nullable) is None
        # and model_fields_set contains the field
        if self.birthday is None and "birthday" in self.model_fields_set:
            _dict['birthday'] = None

        # set to None if occupation (nullable) is None
        # and model_fields_set contains the field
        if self.occupation is None and "occupation" in self.model_fields_set:
            _dict['occupation'] = None

        # set to None if education (nullable) is None
        # and model_fields_set contains the field
        if self.education is None and "education" in self.model_fields_set:
            _dict['education'] = None

        # set to None if contact (nullable) is None
        # and model_fields_set contains the field
        if self.contact is None and "contact" in self.model_fields_set:
            _dict['contact'] = None

        # set to None if languages (nullable) is None
        # and model_fields_set contains the field
        if self.languages is None and "languages" in self.model_fields_set:
            _dict['languages'] = None

        # set to None if social_links (nullable) is None
        # and model_fields_set contains the field
        if self.social_links is None and "social_links" in self.model_fields_set:
            _dict['socialLinks'] = None

        # set to None if relationship_status (nullable) is None
        # and model_fields_set contains the field
        if self.relationship_status is None and "relationship_status" in self.model_fields_set:
            _dict['relationshipStatus'] = None

        # set to None if company (nullable) is None
        # and model_fields_set contains the field
        if self.company is None and "company" in self.model_fields_set:
            _dict['company'] = None

        # set to None if industry (nullable) is None
        # and model_fields_set contains the field
        if self.industry is None and "industry" in self.model_fields_set:
            _dict['industry'] = None

        # set to None if company_position (nullable) is None
        # and model_fields_set contains the field
        if self.company_position is None and "company_position" in self.model_fields_set:
            _dict['companyPosition'] = None

        # set to None if private_settings (nullable) is None
        # and model_fields_set contains the field
        if self.private_settings is None and "private_settings" in self.model_fields_set:
            _dict['privateSettings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateProfileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avatar": obj.get("avatar"),
            "data": obj.get("data"),
            "nickName": obj.get("nickName"),
            "interestTags": obj.get("interestTags"),
            "biography": obj.get("biography"),
            "gender": obj.get("gender"),
            "birthday": obj.get("birthday"),
            "occupation": obj.get("occupation"),
            "education": obj.get("education"),
            "contact": obj.get("contact"),
            "languages": obj.get("languages"),
            "socialLinks": obj.get("socialLinks"),
            "relationshipStatus": obj.get("relationshipStatus"),
            "company": obj.get("company"),
            "industry": obj.get("industry"),
            "companyPosition": obj.get("companyPosition"),
            "privateSettings": obj.get("privateSettings")
        })
        return _obj


