# coding: utf-8

"""
    全部  API 文档

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Team(BaseModel):
    """
    Team
    """ # noqa: E501
    id: Optional[StrictInt] = None
    user_id: Optional[StrictInt] = Field(default=None, alias="userID")
    channel_code: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, alias="channelCode")
    channel_app_id: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, alias="channelAppID")
    role: Optional[Annotated[str, Field(strict=True, max_length=50)]] = None
    permission: Optional[Annotated[str, Field(strict=True, max_length=50)]] = None
    show: Optional[StrictBool] = None
    show_index: Optional[StrictInt] = Field(default=None, alias="showIndex")
    create_date: Optional[datetime] = Field(default=None, alias="createDate")
    last_update: Optional[datetime] = Field(default=None, alias="lastUpdate")
    __properties: ClassVar[List[str]] = ["id", "userID", "channelCode", "channelAppID", "role", "permission", "show", "showIndex", "createDate", "lastUpdate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Team from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if channel_code (nullable) is None
        # and model_fields_set contains the field
        if self.channel_code is None and "channel_code" in self.model_fields_set:
            _dict['channelCode'] = None

        # set to None if channel_app_id (nullable) is None
        # and model_fields_set contains the field
        if self.channel_app_id is None and "channel_app_id" in self.model_fields_set:
            _dict['channelAppID'] = None

        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict['role'] = None

        # set to None if permission (nullable) is None
        # and model_fields_set contains the field
        if self.permission is None and "permission" in self.model_fields_set:
            _dict['permission'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Team from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "userID": obj.get("userID"),
            "channelCode": obj.get("channelCode"),
            "channelAppID": obj.get("channelAppID"),
            "role": obj.get("role"),
            "permission": obj.get("permission"),
            "show": obj.get("show"),
            "showIndex": obj.get("showIndex"),
            "createDate": obj.get("createDate"),
            "lastUpdate": obj.get("lastUpdate")
        })
        return _obj


